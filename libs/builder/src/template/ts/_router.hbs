{{> header}}

//@ts-ignore
import Page from '@smartface/native/ui/page';
//@ts-ignore
import { NativeRouter, NativeStackRouter, Route, Router } from '@smartface/router';
//@ts-ignore
import RouteHelper from './RouteHelper'
//@ts-ignore
import createRenderer from '@smartface/router/lib/native/createRenderer';
//@ts-ignore
import NavigationController from '@smartface/native/ui/navigationcontroller';

{{#each imports}}import {{name}} from {{json from}};{{getNewLine}} {{/each}}

{{#each routers}}

{{#if @first}} export default {{/if}} class {{varName}}<T = Page> extends {{baseRouter}} {
    {{#isEmpty routes }} {{else}} {{#each routes}} {{name}}: {{varName}}; {{/each}} {{/isEmpty}}
    constructor() {
        super(
            {{> eachHelper props=props isAttribute=true params=false routes=./routes to=false }}
        ); 
        {{#each routes}}this.{{name}} = this._routes[{{@index}}] as any;{{/each}} 
        {{#isEqual type "StackRouter"}}this._renderer = createRenderer(new NavigationController() as any);{{/isEqual}}
        {{#isEqual type "Route"}} this.build = (...args) => {
            const {{pageVarName}}  = require({{json pageRequirePath}}).default; 
            return new {{pageVarName}} (...args); 
        };{{/isEqual}}
        
    }
    {{#isEmpty routes }} {{else}} get children(){ return [ {{#each routes}} this.{{name}} {{#if @last}}  {{else}}, {{/if}}   {{/each}} ] } {{/isEmpty}}
}
{{/each}}