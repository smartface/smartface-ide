{{> header}}
import { styleablePageMixin } from '@smartface/styling-context/lib/styleablePageMixin';
import { styleableComponentMixin, styleableContainerComponentMixin } from '@smartface/styling-context/lib/styleableComponentMixin';
import Page from '@smartface/native/ui/page';
import View from '@smartface/native/ui/view';
import { ComponentStyleContext } from '@smartface/styling-context/lib/ComponentStyleContext';
import System from '@smartface/native/device/system';
import StatusBar from '@smartface/native/application/statusbar';
import HeaderBar from '@smartface/native/ui/headerbar';

{{require smfObjects footer ""}}
{{getRequiredIrregularEnums smfObjects}}
{{getRequiredLibModules smfObjects ""}}
{{!-- declare namespace {{capitalizeFirstLetter pageName}} {
    export type ChildrenNames = {{#each children}} | {{json name}}{{/each}};
} --}}

interface {{capitalizeFirstLetter pageName}}Children {
    {{#each smfObjects}} {{name}}?: {{varName}}; {{/each}}
  statusBar?: typeof StatusBar;
  headerBar?: HeaderBar;
  [key: string]: any;
};

class {{capitalizeFirstLetter pageName}} extends  styleablePageMixin(Page) {
    protected _children: {{capitalizeFirstLetter pageName}}Children = {};
    get children(): Readonly<{{capitalizeFirstLetter pageName}}Children> {
        return this._children;
    }
    
    static $$styleContext: ComponentStyleContext = {
	classNames: {{json footer.page.className}},
	defaultClassNames: {{json footer.page.defaultClassNames}},
		userProps: {{#isEmpty footer.page.props}} {} {{else}}{{> eachHelper props=footer.page.props }}{{/isEmpty}},
	statusBar:{
		classNames: {{json footer.statusBar.className}},
		defaultClassNames: {{json footer.statusBar.defaultClassNames}},
		userProps: {{#isEmpty footer.statusBar.props}} {} {{else}}{{> eachHelper props=footer.statusBar.props}}{{/isEmpty}}
	},
	headerBar:{
		classNames: {{json footer.headerBar.className}},
		defaultClassNames: {{json footer.headerBar.defaultClassNames}},
		userProps: {{#isEmpty footer.headerBar.props}} {} {{else}}{{> eachHelper props=footer.headerBar.props}}{{/isEmpty}}
	}};
    {{#each componentsAssignedToPage}}{{name}}: {{klass}};{{/each}}
    constructor(props?: any) {
        super(Object.assign({ {{#if footer.page.orientation}}orientation: Page.Orientation.{{footer.page.orientation}}{{/if}} }, props ));
        {{#if footer.page.safeAreaEnabled}}this.ios && (this.ios.safeAreaLayoutMode = true);{{/if}}this._children.statusBar = this.statusBar || {} as any;
		this._children.headerBar = this.headerBar || {} as any;
        {{#each children}}this.addChildByName(new {{constructorName}}(), {{json name}});{{/each}}
        {{#each componentsAssignedToPage}}this.{{name}} = {{ref}};{{/each}}
        this.applyTestIDs({{json footer.page.testId}});
    }
    getName(){
        return '{{capitalizeFirstLetter name}}';
    }
    {{> onLoad footer}}
    addChild(child: View<any>, name?: string, classNames?: string, userProps?: { [key: string]: any; }, defaultClassNames?: string): void {
        if (this['layout']) {
			this['layout'].addChild(child);
		}
        if (name) {
            this.addStyleableChild(child, name, classNames, userProps, defaultClassNames);
        }
    }

    /**
    * @deprecated The method should not be used
    */
    addChildByName(child: View<any>, name: string) {
        this._children[name] = child;
        this.addStyleableChild(child, name);
        this.addChild(child);
    }
    applyTestIDs(testId: string){
        Object.keys(this._children).forEach( child => {
            this._children[child].testId = testId + '_' + child.charAt(0).toUpperCase() + child.slice(1);
            if(this._children[child].applyTestIDs){
                this._children[child].applyTestIDs(this._children[child].testId);
            }
        });
    }
    removeChild(child: View<any>) {
        super.removeChild(child);
        Object.keys(this._children).forEach((name) => {
            if(child === this._children[name])
            delete this._children[name]
        })
    }

    removeChildren(){
        this._children = {statusBar: this._children.statusBar, headerBar: this._children.headerBar};
        super.removeChildren();
    }
}
export default {{capitalizeFirstLetter pageName}};

{{> body}}

{{> footer footer}}