import { styleableComponentMixin, ThemeService } from '@smartface/styling-context';
import { ComponentStyleContext } from '@smartface/styling-context/lib/ComponentStyleContext';
import { BottomTabBarRouter } from '@smartface/router';
import TabBarItem from '@smartface/native/ui/tabbaritem';
import createRenderer from '@smartface/router/lib/native/createRenderer';


{{> body}}

interface ${{capitalizeFirstLetter libraryType}}Children {
    {{#each smfObjects}} {{name}}?: {{varName}}; {{/each}}
    [key: string]: any;
};

export default class ${{capitalizeFirstLetter libraryType}} extends BottomTabBarRouter {
    protected _children: ${{capitalizeFirstLetter libraryType}}Children = {};
    static $$styleContext: ComponentStyleContext = { 
        classNames: {{json className}},
        defaultClassNames: {{json defaultClassNames}},
        userProps: {{#isEmpty props}} {} {{else}}{{> eachHelper props=props}}{{/isEmpty}} 
    };

    constructor(props){
        super({
            renderer: createRenderer(),
            homeRoute: 0,
            tabbarParams: () => {
                const style = ThemeService.instance.getNativeStyle({{json className}});
                return {
                    itemColor: style.itemColor,
                    ios: style.ios,
                    backgroundColor: style.backgroundColor,
                    iconSize: style.iconSize
                };
            },
            items: [
            {{#each children}} new {{constructorName}}() {{#if @last}} {{else}}, {{getNewLine}} {{/if}}  {{/each}}
            ],
            ...props
        });
        this.initTheme();
    }

    get items(): TabBarItem[] {
        //@ts-ignore
        return this._items;
    }

    initTheme() {
        //@ts-ignore
        this._items.forEach((item, index) => {
            this._children['tabbaritem' + index] = item;
        });
        ThemeService.instance.addGlobalComponent({
            children: this._children
        } as any, 'bottomTabbar');
    }
    
}

