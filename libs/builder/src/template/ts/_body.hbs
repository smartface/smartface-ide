{{#each smfObjects}}
    {{#if smfObjects}} {{#isRepeatedView type}} {{else}}
    interface {{capitalizeFirstLetter varName}}Children {
        {{#each smfObjects}} {{name}}?: {{varName}}; {{/each}}
        [key: string]: any;
    };
    {{/isRepeatedView}}{{/if}}

    
	class {{varName}} extends {{#if isContainerComponent}}  styleableContainerComponentMixin({{#if isModuleComp}}{{libraryType}}{{else}}
		{{#if isLibraryComponent}}{{libraryType}}{{else}}{{type}}{{/if}}
	{{/if}})
  {{else}} styleableComponentMixin({{#if isModuleComp}}{{libraryType}}{{else}}
		{{#if isLibraryComponent}}{{libraryType}}{{else}}{{type}}{{/if}}
	{{/if}}) {{/if}} {
    {{#if smfObjects}} {{#isRepeatedView type}} {{else}}
    protected _children: {{capitalizeFirstLetter varName}}Children = {};
    get children(): Readonly<{{capitalizeFirstLetter varName}}Children> {
        return this._children;
    }
    {{/isRepeatedView}}{{/if}}
    static $$styleContext: ComponentStyleContext = { classNames: {{json className}},  defaultClassNames: {{json defaultClassNames}}, userProps:
	{{#isEmpty props}} {} {{else}}{{> eachHelper props=props}}{{/isEmpty}} };
	{{#isRepeatedView type}}
        private itemIndex = 0;
	{{/isRepeatedView}}
    {{#isEqual type "ShimmerFlexLayout"}}
        layout: FlexLayout;
    {{/isEqual}}
	constructor(props?: any) {
    super(
    {{#if layoutManager }} { {{> gridViewBody layoutManager=./layoutManager }} {{#isEmpty attributes}}{{else}},...{{> eachHelper props=attributes isAttribute=true rawProps=./rawProps}}{{/isEmpty}}    } {{else}}
	{{#isEmpty attributes}}props{{else}}{{> eachHelper props=attributes isAttribute=true rawProps=./rawProps}}{{/isEmpty}} {{/if}});{{#if mtbTestId}}this.materialTextBox.testId='{{mtbTestId}}';{{/if}}
    {{#isRepeatedView type}} {{else}}
        {{#isEqual type "ShimmerFlexLayout"}}
            {{#if children.0.constructorName}}this.contentLayout = new {{children.0.constructorName}}(); this.layout = this.contentLayout; this.children['contentLayout'] = this.layout;{{else}}this.contentLayout = ( this.layout || new FlexLayout({flexGrow: 1})); this.layout = this.contentLayout; {{/if}} {{else}}
                {{#each children}}this.addChildByName({{#if usePageVariable}}this.{{name}}{{else}}new {{constructorName}}(){{/if}}, {{json name}});{{/each}}
        {{/isEqual}}
    {{/isRepeatedView}}
    {{#if html}} 
        const html =  {{getString "html" html ""}};
        const attributedStrings = createAttributedStrings(html);
        this.attributedText = attributedStrings.map(s => new AttributedString(propFactory(s)));
    {{/if}}
    {{#isRepeatedView type}}
		{{#if isLibraryComponent}}{{else}}{{#if isModuleComp}}{{else}}{{> onRowCreate children=./smfObjects defaultItemType=./defaultItemType}}{{/if}}{{/if}}{{else}}
	{{/isRepeatedView}}
    {{#if isLibraryPage}}this.testId = {{json testId}}; {{/if}}
    }
    {{#if smfObjects}} {{#isRepeatedView type}} {{else}}
    /**
    * @deprecated The method should not be used
    */ 
    addChildByName(child: View<any>, name: string) {
        this._children[name] = child;
        if (this['layout']) {
            this['layout'].addChild(child);
        } else {
            this.addChild(child);
        }
    }{{/isRepeatedView}}{{/if}}{{#isEmpty ifNeededApplyingTestId}} {{else}}
    applyTestIDs(testId: string){
        Object.keys(this._children).forEach( child => {
            this._children[child].testId = testId + '_' + child.charAt(0).toUpperCase() + child.slice(1);
            if(this._children[child].applyTestIDs){
                this._children[child].applyTestIDs(this._children[child].testId);
            }
        });
    }{{/isEmpty}}
    
	}
	{{#if smfObjects}} {{> body footer=../footer pageName=../pageName}} {{/if}}
	{{/each~}}