{{> header}}
import { Styleable } from '{{coreLibPath}}/Styleable';
import View = require('@smartface/native/ui/view');
import { ComponentStyleContext } from 'generated/core/ComponentStyleContext';
import System = require('@smartface/native/device/system');

{{require this footer "true"}} {{getRequiredIrregularEnums smfObjects}}
{{getRequiredLibModules smfObjects "true"}}

export default class {{capitalizeFirstLetter libraryType}} extends {{type}} implements Styleable {
    dispatch: (action: {[key: string]: any}) => void;
    {{#isEqual type "ShimmerFlexLayout"}}
        layout: FlexLayout;
    {{/isEqual}}
    {{!-- TODO: only container components --}}
    children: { [key: string]: any } = {};
    {{!-- {{#if smfObjects}}{{#isRepeatedView type}} {{else}}children: { [key: string]: any } = {};{{/isRepeatedView}}{{/if}} --}}
    static $$styleContext: ComponentStyleContext = { 
	classNames: {{json className}},
	defaultClassNames: {{json defaultClassNames}},
	userProps: {{#isEmpty props}} {} {{else}}{{> eachHelper props=props}}{{/isEmpty}} };
    {{#isRepeatedView type}}
        private itemIndex = 0;
	{{/isRepeatedView}}
    {{#each componentsAssignedToRoot}}{{name}}: StyleContextComponentType<{{klass}}>;{{/each}}
    constructor(props?: ConstructorParameters<typeof {{type}}>) {
    super(
    {{#if layoutManager }} { {{> gridViewBody layoutManager=./layoutManager }} {{#isEmpty attributes}}{{else}},...{{> eachHelper props=attributes isAttribute=true rawProps=./rawProps}}{{/isEmpty}}    } {{else}}
	{{#isEmpty attributes}}{{else}}{{> eachHelper props=attributes isAttribute=true rawProps=./rawProps}}{{/isEmpty}} {{/if}});
    {{#isRepeatedView type}} {{else}}
        {{#isEqual type "ShimmerFlexLayout"}}
            {{#if children.0.constructorName}}this.contentLayout = new {{children.0.constructorName}}(); this.layout = this.contentLayout; this.children['contentLayout'] = this.layout;{{else}}this.contentLayout = ( this.layout || new FlexLayout({flexGrow: 1})); this.layout = this.contentLayout; {{/if}} {{else}}
                {{#each children}}this.addChildByName(new {{constructorName}}(), {{json name}});{{/each}}
                {{#each componentsAssignedToRoot}}this.{{name}} = {{ref}};{{/each}}
        {{/isEqual}}
    {{/isRepeatedView}}
    {{#if html}} 
    const html =  {{getString "html" html ""}};
    const attributedStrings = createAttributedStrings(html);
    this.attributedText = attributedStrings.map( s => new AttributedString(propFactory.default(s)));
    {{/if}}
    {{#isRepeatedView type}}
		{{#if isLibraryComponent}}{{else}}{{#if isModuleComp}}{{else}}{{> onRowCreate children=./smfObjects defaultItemType=./defaultItemType}}{{/if}}{{/if}}{{else}}
	{{/isRepeatedView}}
    }
    {{#if smfObjects}}{{#isRepeatedView type}} {{else}} addChildByName(child: View, name: string) {
        this.children[name] = child;
        this.addChild(child);
    }
    {{!-- TODO: Use only container components --}}
    {{!-- Context's addchild method definition --}}
    addChild(child: View, name?: string, classNames?: string, userProps?: { [key: string]: any; }, defaultClassNames?: string): void {
        if (this['layout']) {
            this['layout'].addChild(child);
        } else {
            super.addChild(child);
        }
    }
    {{/isRepeatedView}}{{/if}}{{#if children}}
    applyTestIDs(testId: string =  {{capitalizeFirstLetter libraryType}}.$$styleContext.userProps.testId){
        Object.keys(this.children).forEach( child => {
            this.children[child].testId = testId + '_' + child;
            if(this.children[child].children){
                this.children[child].applyTestIDs(this.children[child].testId);
            }
        });
    }{{/if}}
}

{{> body}}